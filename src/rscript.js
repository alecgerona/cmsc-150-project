var maximize = "equation<-NULL; pos<-NULL; ing<-NULL; variables<-c();simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return(mat[nrow(mat), ]);     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {       if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); return(mat);  };          };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);          variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 2));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);";
var maximizeTest = "compile<-NULL; equation<-NULL; pos<-NULL; ing<-NULL; variables<-c(); simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat); compile[[1]]=mat;  for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return(compile);     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {    if(length(minPosPos) == 0) return (0);   if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); compile[[num+1]]=mat; };  return(mat);        };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);    for (y in seq(1, length(current), by=1)) {       if (is.na(as.numeric(current[y]))) {         current[y] <- \"\";       } else {         break;       };     };      variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 3));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);"
var maximizeRefresh = "equation<-NULL; pos<-NULL; ing<-NULL; variables<-c(); simplex(system);simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return();     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {       if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); return(mat);  };          };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);          variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 2));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);";
let sampleScript2 = new ocpu.Snippet("E1 <- function (x1, x2) 7 * x1 + 11 * x2 + -77; E2 <- function (x1, x2) 10 * x1 + 8 * x2 + -80; E3 <- function (x1, x2) 1 * x1 + 0 * x2 + -9; E4 <- function (x1, x2) 0 * x1 + 1 * x2 + -6; E5 <- function (x1, x2) -150 * x1 + -175 * x2 + 0;   E6 <- function (x1, x2) 366622.20 * x1 + 1500000 * x2 + -511250665; E7 <- function (x1, x2) 0 * x1 + 1500000 * x2 + -409000532; E8 <- function (x1, x2) -366622.20 * x1 + -1500000 * x2 + 0;   A1 <- function (x1, x2) 1 * x1 + 0 * x2 + -100; A2 <- function (x1, x2) 2 * x1 + 4 * x2 + -240; A3 <- function (x1, x2) 0.2 * x1 + -0.8 * x2 + 0; A4 <- function (x1, x2) -20 * x1 + -50 * x2 + 0;  B1 <- function (x1, x2) -1 * x1 + 0 * x2 + -1250; B2 <- function (x1, x2) 0 * x1 + 1 * x2 + -2500; B4 <- function (x1, x2) -1 * x1 + 0.5 * x2 + 0; B3 <- function (x1, x2) 0.05 * x1 + 0.08 * x2 + -5000;  C1 <- function (x1, x2) 60 * x1 + 60 * x2 + -300; C2 <- function (x1, x2) 12 * x1 + 6 * x2 + -36; C3 <- function (x1, x2) 10 * x1 + 30 * x2 + -90; C4 <- function (x1, x2) 0.12 * x1 + 0.15 * x2 + 0;  system <- list(C1, C2, C3, C4); system2 <- list(E1, E2, E3, E4, E5);  simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix;      mat = t(mat);      mat[nrow(mat), ] = mat[nrow(mat), ] * -1;      mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);      print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return();     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {       if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat);     return(mat);   };          };  equation <- NULL; pos <-NULL;  AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);          variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 2));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat)); simplex(system);    }");
let sampleScript3 = new ocpu.Snippet("equation<-NULL; pos<-NULL; ing<-NULL; variables<-c(); E1 <- function (x1, x2) 7 * x1 + 11 * x2 + -77; E2 <- function (x1, x2) 10 * x1 + 8 * x2 + -80; E3 <- function (x1, x2) 1 * x1 + 0 * x2 + -9; E4 <- function (x1, x2) 0 * x1 + 1 * x2 + -6; E5 <- function (x1, x2) -150 * x1 + -175 * x2 + 0;   E6 <- function (x1, x2) 366622.20 * x1 + 1500000 * x2 + -511250665; E7 <- function (x1, x2) 0 * x1 + 1500000 * x2 + -409000532; E8 <- function (x1, x2) -366622.20 * x1 + -1500000 * x2 + 0;   A1 <- function (x1, x2) 1 * x1 + 0 * x2 + -100; A2 <- function (x1, x2) 2 * x1 + 4 * x2 + -240; A3 <- function (x1, x2) 0.2 * x1 + -0.8 * x2 + 0; A4 <- function (x1, x2) -20 * x1 + -50 * x2 + 0;  B1 <- function (x1, x2) -1 * x1 + 0 * x2 + -1250; B2 <- function (x1, x2) 0 * x1 + 1 * x2 + -2500; B4 <- function (x1, x2) -1 * x1 + 0.5 * x2 + 0; B3 <- function (x1, x2) 0.05 * x1 + 0.08 * x2 + -5000;  system <- list(B1, B2, B3, B4);  simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix; mat = t(mat); mat[nrow(mat), ] = mat[nrow(mat), ] * -1;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return();     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {       if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); return(mat);  };          };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);          variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 2));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);");
var minimizationMixed = new ocpu.Snippet("equation<-NULL; pos<-NULL; ing<-NULL; variables<-c(); simplex(system); simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix; mat = t(mat); mat[nrow(mat), ] = mat[nrow(mat), ] * -1;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return();     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {       if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); return(mat);  };          };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);          variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 2));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);");
var rString = "equation<-NULL; pos<-NULL; ing<-NULL; variables<-c(); simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix; mat = t(mat); mat[nrow(mat), ] = mat[nrow(mat), ] * -1;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return(mat[nrow(mat), ]);     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {    if(length(minPosPos) == 0) return (0);   if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); };  return(mat);        };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);    for (y in seq(1, length(current), by=1)) {       if (is.na(as.numeric(current[y]))) {         current[y] <- \"\";       } else {         break;       };     };      variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 3));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);"
var refresh = "equation<-NULL; pos<-NULL; ing<-NULL; variables<-c(); simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix; mat = t(mat); mat[nrow(mat), ] = mat[nrow(mat), ] * -1;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat);   for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return(mat[nrow(mat), ]);     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {    if(length(minPosPos) == 0) return (0);  if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); };  return(mat);        };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);    for (y in seq(1, length(current), by=1)) {       if (is.na(as.numeric(current[y]))) {         current[y] <- \"\";       } else {         break;       };     };      variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 3));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);"
var minimizeCompile = "equation<-NULL; pos<-NULL; ing<-NULL; compile<-NULL; variables<-c(); simplex <- function(mat, verbose=TRUE) {   mat = AugCoeffMatrix(mat)$augcoeffmatrix; mat = t(mat); mat[nrow(mat), ] = mat[nrow(mat), ] * -1;   mat = cbind(mat[ , 1:ncol(mat)-1], diag(nrow(mat)), mat[ , ncol(mat)]);   print(\"Given matrix\");   print(mat); compile[[1]]=mat;  for (num in seq(1, 10000, by=1)) {     minNegPos = which.min(mat[nrow(mat), ]);     if(min(mat[nrow(mat), ]) >= 0) {       return(compile);     };          x = mat[ , minNegPos];          x = mat[ , ncol(mat)] / x;          x = x[1:length(x)-1];          minPosPos = which(x == min(x[which(x > 0)]));          mat[minPosPos, ] = mat[minPosPos, ] / mat[minPosPos, minNegPos];          for (i in seq(1, nrow(mat), by=1)) {    if(length(minPosPos) == 0) return (0);   if (i == minPosPos) next;       mat[i, ] = mat[i,] - (mat[i, minNegPos] * mat[minPosPos, ]);      };          print(paste(\"Iteration \", num));      print(mat); compile[[num+1]]=mat;};  return(mat);        };      AugCoeffMatrix <- function(system) {      for (i in seq(1, length(system), by=1)) {          current <- unlist(system[i]);     current <- deparse(current);          for (x in seq(2, length(current), by=1)) {       equation <- paste(equation, current[x], sep=\"\");     };     current = equation;     equation = NULL;          substr(current, nchar(current), nchar(current)) = \" \";          current <- strsplit(current, \"\\\\s+\");     current <- unlist(current);    for (y in seq(1, length(current), by=1)) {       if (is.na(as.numeric(current[y]))) {         current[y] <- \"\";       } else {         break;       };     };      variableIndex = grep(\"x\", current);          if (i > 1) {       if (csize != length(variableIndex)+1) {       };     };          csize <- length(variableIndex)+1;          for (x in seq(1, length(variableIndex), by=1)) {       pos[length(pos)+1] = as.numeric(substr(current[variableIndex[x]], 2, 3));     };          for (x in seq(1, length(variableIndex), by=1)) {       ing[length(ing)+1] = as.numeric(current[variableIndex[pos[x]]-2]);     };     for (x in seq(1, length(current), by=1)) {       if (substr(current[x], 1, 1) != \"x\") {         if (x == length(current)) {           ing[length(ing)+1] = current[x];         } else if (grepl(\"\\\\+\", current[x+1])) {            ing[length(ing)+1] = current[x];         };       };     };               pos = c();   };      ing <- as.numeric(ing);      for (i in seq(csize, length(ing), by=csize)) {     ing[i] = ing[i] * -1;   };      mat = matrix(c(ing), nrow=length(system), ncol=csize, byrow=TRUE);      for (i in seq(1, csize-1, by=1)) {     variables[length(variables)+1] = paste(\"x\", i, sep=\"\");   };         rownames(mat) <- 1:length(system);   colnames(mat) <- c(variables, \"RHS\");      return(list(variables=variables, augcoeffmatrix=mat));    }; simplex(system);"



var foodGroup = 
[{"url":"frozen-broccoli.png", "name":"FrozenBroccoli","pricePerServing":0.16,"serving":"10 Oz Pkg","calories":73.8,"cholesterol":0,"totalFat":0.8,"sodium":68.2,"carbohydrates":13.6,"dietaryFiber":8.5,"protein":8,"vitA":5867.4,"vitC":160.2,"calcium":159,"iron":2.3},
{"url":"carrots-raw.jpg", "name":"Carrots,Raw","pricePerServing":0.07,"serving":"1/2 CupShredded","calories":23.7,"cholesterol":0,"totalFat":0.1,"sodium":19.2,"carbohydrates":5.6,"dietaryFiber":1.6,"protein":0.6,"vitA":15471,"vitC":5.1,"calcium":14.9,"iron":0.3},
{"url":"celery-raw.png", "name":"Celery, Raw","pricePerServing":0.04,"serving":"1 Stalk","calories":6.4,"cholesterol":0,"totalFat":0.1,"sodium":34.8,"carbohydrates":1.5,"dietaryFiber":0.7,"protein":0.3,"vitA":53.6,"vitC":2.8,"calcium":16,"iron":0.2},
{"url":"frozen-corn.jpg", "name":"Frozen Corn","pricePerServing":0.18,"serving":"1/2 Cup","calories":72.2,"cholesterol":0,"totalFat":0.6,"sodium":2.5,"carbohydrates":17.1,"dietaryFiber":2,"protein":2.5,"vitA":106.6,"vitC":5.2,"calcium":3.3,"iron":0.3},
{"url":"lettuce-iceberg-raw.jpg", "name":"Lettuce,Iceberg,Raw","pricePerServing":0.02,"serving":"1 Leaf","calories":2.6,"cholesterol":0,"totalFat":0,"sodium":1.8,"carbohydrates":0.4,"dietaryFiber":0.3,"protein":0.2,"vitA":66,"vitC":0.8,"calcium":3.8,"iron":0.1},
{"url":"peppers-sweet-raw.png", "name":"Peppers,Sweet, Raw","pricePerServing":0.53,"serving":"1 Pepper","calories":20,"cholesterol":0,"totalFat":0.1,"sodium":1.5,"carbohydrates":4.8,"dietaryFiber":1.3,"protein":0.7,"vitA":467.7,"vitC":66.1,"calcium":6.7,"iron":0.3},
{"url":"potatoes-baked.jpg", "name":"Potatoes,Baked","pricePerServing":0.06,"serving":"1/2 Cup","calories":171.5,"cholesterol":0,"totalFat":0.2,"sodium":15.2,"carbohydrates":39.9,"dietaryFiber":3.2,"protein":3.7,"vitA":0,"vitC":15.6,"calcium":22.7,"iron":4.3},
{"url":"tofu.jpg", "name":"Tofu","pricePerServing":0.31,"serving":"1/4 block","calories":88.2,"cholesterol":0,"totalFat":5.5,"sodium":8.1,"carbohydrates":2.2,"dietaryFiber":1.4,"protein":9.4,"vitA":98.6,"vitC":0.1,"calcium":121.8,"iron":6.2},
{"url":"roasted-chicken.jpg", "name":"RoastedChicken","pricePerServing":0.84,"serving":"1 lb chicken","calories":277.4,"cholesterol":129.9,"totalFat":10.8,"sodium":125.6,"carbohydrates":0,"dietaryFiber":0,"protein":42.2,"vitA":77.4,"vitC":0,"calcium":21.9,"iron":1.8},
{"url":"spaghetti-with-sauce.jpg", "name":"Spaghetti W/Sauce","pricePerServing":0.78,"serving":"1 1/2 Cup","calories":358.2,"cholesterol":0,"totalFat":12.3,"sodium":1237.1,"carbohydrates":58.3,"dietaryFiber":11.6,"protein":8.2,"vitA":3055.2,"vitC":27.9,"calcium":80.2,"iron":2.3},
{"url":"tomato-red-ripe-raw.jpg", "name":"Tomato,Red,Ripe,Raw","pricePerServing":0.27,"serving":"1 Tomato, 2-3/5 In","calories":25.8,"cholesterol":0,"totalFat":0.4,"sodium":11.1,"carbohydrates":5.7,"dietaryFiber":1.4,"protein":1,"vitA":766.3,"vitC":23.5,"calcium":6.2,"iron":0.6},
{"url":"apple-raw-with-skin.jpg", "name":"Apple,Raw,W/Skin","pricePerServing":0.24,"serving":"1Fruit,3/Lb,Wo/Rf","calories":81.4,"cholesterol":0,"totalFat":0.5,"sodium":0,"carbohydrates":21,"dietaryFiber":3.7,"protein":0.3,"vitA":73.1,"vitC":7.9,"calcium":9.7,"iron":0.2},
{"url":"banana.jpg", "name":"Banana","pricePerServing":0.15,"serving":"1Fruit,Wo/Skn&Seeds","calories":104.9,"cholesterol":0,"totalFat":0.5,"sodium":1.1,"carbohydrates":26.7,"dietaryFiber":2.7,"protein":1.2,"vitA":92.3,"vitC":10.4,"calcium":6.8,"iron":0.4},
{"url":"grapes.jpg", "name":"Grapes","pricePerServing":0.32,"serving":"10Fruits,Wo/Rf","calories":15.1,"cholesterol":0,"totalFat":0.1,"sodium":0.5,"carbohydrates":4.1,"dietaryFiber":0.2,"protein":0.2,"vitA":24,"vitC":1,"calcium":3.4,"iron":0.1},
{"url":"kiwi-raw-fresh.jpg", "name":"Kiwifruit,Raw,Fresh","pricePerServing":0.49,"serving":"1 MedFrt,Wo/Skin","calories":46.4,"cholesterol":0,"totalFat":0.3,"sodium":3.8,"carbohydrates":11.3,"dietaryFiber":2.6,"protein":0.8,"vitA":133,"vitC":74.5,"calcium":19.8,"iron":0.3},
{"url":"orange.jpg", "name":"Oranges","pricePerServing":0.15,"serving":"1 Frt,2-5/8Diam","calories":61.6,"cholesterol":0,"totalFat":0.2,"sodium":0,"carbohydrates":15.4,"dietaryFiber":3.1,"protein":1.2,"vitA":268.6,"vitC":69.7,"calcium":52.4,"iron":0.1},
{"url":"bagel.jpg", "name":"Bagels","pricePerServing":0.16,"serving":"1 Oz","calories":78,"cholesterol":0,"totalFat":0.5,"sodium":151.4,"carbohydrates":15.1,"dietaryFiber":0.6,"protein":3,"vitA":0,"vitC":0,"calcium":21,"iron":1},
{"url":"wheat-bread.jpg", "name":"Wheat Bread","pricePerServing":0.05,"serving":"1 Sl","calories":65,"cholesterol":0,"totalFat":1,"sodium":134.5,"carbohydrates":12.4,"dietaryFiber":1.3,"protein":2.2,"vitA":0,"vitC":0,"calcium":10.8,"iron":0.7},
{"url":"white-bread.jpg", "name":"White Bread","pricePerServing":0.06,"serving":"1 Sl","calories":65,"cholesterol":0,"totalFat":1,"sodium":132.5,"carbohydrates":11.8,"dietaryFiber":1.1,"protein":2.3,"vitA":0,"vitC":0,"calcium":26.2,"iron":0.8},
{"url":"oatmeal-cookie.jpg", "name":"OatmealCookies","pricePerServing":0.09,"serving":"1 Cookie","calories":81,"cholesterol":0,"totalFat":3.3,"sodium":68.9,"carbohydrates":12.4,"dietaryFiber":0.6,"protein":1.1,"vitA":2.9,"vitC":0.1,"calcium":6.7,"iron":0.5},
{"url":"apple-pie.jpg", "name":"Apple Pie","pricePerServing":0.16,"serving":"1 Oz","calories":67.2,"cholesterol":0,"totalFat":3.1,"sodium":75.4,"carbohydrates":9.6,"dietaryFiber":0.5,"protein":0.5,"vitA":35.2,"vitC":0.9,"calcium":3.1,"iron":0.1},
{"url":"chocolate-chip-cookie.jpg", "name":"ChocolateChip Cookies","pricePerServing":0.03,"serving":"1 Cookie","calories":78.1,"cholesterol":5.1,"totalFat":4.5,"sodium":57.8,"carbohydrates":9.3,"dietaryFiber":0,"protein":0.9,"vitA":101.8,"vitC":0,"calcium":6.2,"iron":0.4},
{"url":"butter.jpg", "name":"Butter,Regular","pricePerServing":0.05,"serving":"1 Pat","calories":35.8,"cholesterol":10.9,"totalFat":4.1,"sodium":41.3,"carbohydrates":0,"dietaryFiber":0,"protein":0,"vitA":152.9,"vitC":0,"calcium":1.2,"iron":0},
{"url":"cheddar-cheese.jpg", "name":"CheddarCheese","pricePerServing":0.25,"serving":"1 Oz","calories":112.7,"cholesterol":29.4,"totalFat":9.3,"sodium":173.7,"carbohydrates":0.4,"dietaryFiber":0,"protein":7,"vitA":296.5,"vitC":0,"calcium":202,"iron":0.2},
{"url":"milk.jpg", "name":"3.3%Fat,WholeMilk","pricePerServing":0.16,"serving":"1 C","calories":149.9,"cholesterol":33.2,"totalFat":8.1,"sodium":119.6,"carbohydrates":11.4,"dietaryFiber":0,"protein":8,"vitA":307.4,"vitC":2.3,"calcium":291.3,"iron":0.1},
{"url":"low-fat-milk.jpg", "name":"2% LowfatMilk","pricePerServing":0.23,"serving":"1 C","calories":121.2,"cholesterol":18.3,"totalFat":4.7,"sodium":121.8,"carbohydrates":11.7,"dietaryFiber":0,"protein":8.1,"vitA":500.2,"vitC":2.3,"calcium":296.7,"iron":0.1},
{"url":"skim-milk.jpg", "name":"Skim Milk","pricePerServing":0.13,"serving":"1 C","calories":85.5,"cholesterol":4.4,"totalFat":0.4,"sodium":126.2,"carbohydrates":11.9,"dietaryFiber":0,"protein":8.4,"vitA":499.8,"vitC":2.4,"calcium":302.3,"iron":0.1},
{"url":"poached-egg.jpg", "name":"Poached Eggs","pricePerServing":0.08,"serving":"Lrg Egg","calories":74.5,"cholesterol":211.5,"totalFat":5,"sodium":140,"carbohydrates":0.6,"dietaryFiber":0,"protein":6.2,"vitA":316,"vitC":0,"calcium":24.5,"iron":0.7},
{"url":"scrambled-egg.jpg", "name":"ScrambledEggs","pricePerServing":0.11,"serving":"1 Egg","calories":99.6,"cholesterol":211.2,"totalFat":7.3,"sodium":168,"carbohydrates":1.3,"dietaryFiber":0,"protein":6.7,"vitA":409.2,"vitC":0.1,"calcium":42.6,"iron":0.7},
{"url":"turkey-bologna.jpeg", "name":"Bologna,Turkey","pricePerServing":0.15,"serving":"1 Oz","calories":56.4,"cholesterol":28.1,"totalFat":4.3,"sodium":248.9,"carbohydrates":0.3,"dietaryFiber":0,"protein":3.9,"vitA":0,"vitC":0,"calcium":23.8,"iron":0.4},
{"url":"beef-frankfurter.jpg", "name":"Frankfurter,Beef","pricePerServing":0.27,"serving":"1 Frankfurter","calories":141.8,"cholesterol":27.4,"totalFat":12.8,"sodium":461.7,"carbohydrates":0.8,"dietaryFiber":0,"protein":5.4,"vitA":0,"vitC":10.8,"calcium":9,"iron":0.6},
{"url":"sliced-ham.jpg", "name":"Ham,Sliced,Extralean","pricePerServing":0.33,"serving":"1 Sl,6-1/4x4x1/16 In","calories":37.1,"cholesterol":13.3,"totalFat":1.4,"sodium":405.1,"carbohydrates":0.3,"dietaryFiber":0,"protein":5.5,"vitA":0,"vitC":7.4,"calcium":2,"iron":0.2},
{"url":"kielbasa.jpg", "name":"Kielbasa,Prk","pricePerServing":0.15,"serving":"1 Sl,6x3-3/4x1/16 In","calories":80.6,"cholesterol":17.4,"totalFat":7.1,"sodium":279.8,"carbohydrates":0.6,"dietaryFiber":0,"protein":3.4,"vitA":0,"vitC":5.5,"calcium":11.4,"iron":0.4},
{"url":"capncrunch.jpg", "name":"Cap'N Crunch","pricePerServing":0.31,"serving":"1 Oz","calories":119.6,"cholesterol":0,"totalFat":2.6,"sodium":213.3,"carbohydrates":23,"dietaryFiber":0.5,"protein":1.4,"vitA":40.6,"vitC":0,"calcium":4.8,"iron":7.5},
{"url":"cheerios.jpg", "name":"Cheerios","pricePerServing":0.28,"serving":"1 Oz","calories":111,"cholesterol":0,"totalFat":1.8,"sodium":307.6,"carbohydrates":19.6,"dietaryFiber":2,"protein":4.3,"vitA":1252.2,"vitC":15.1,"calcium":48.6,"iron":4.5},
{"url":"corn-flakes.jpg", "name":"Corn Flks,Kellogg'S","pricePerServing":0.28,"serving":"1 Oz","calories":110.5,"cholesterol":0,"totalFat":0.1,"sodium":290.5,"carbohydrates":24.5,"dietaryFiber":0.7,"protein":2.3,"vitA":1252.2,"vitC":15.1,"calcium":0.9,"iron":1.8},
{"url":"raisin-bran.jpg", "name":"Raisin Brn,Kellg'S","pricePerServing":0.34,"serving":"1.3 Oz","calories":115.1,"cholesterol":0,"totalFat":0.7,"sodium":204.4,"carbohydrates":27.9,"dietaryFiber":4,"protein":4,"vitA":1250.2,"vitC":0,"calcium":12.9,"iron":16.8},
{"url":"rice-krispies.jpg", "name":"Rice Krispies","pricePerServing":0.32,"serving":"1 Oz","calories":112.2,"cholesterol":0,"totalFat":0.2,"sodium":340.8,"carbohydrates":24.8,"dietaryFiber":0.4,"protein":1.9,"vitA":1252.2,"vitC":15.1,"calcium":4,"iron":1.8},
{"url":"special-k.png", "name":"Special K","pricePerServing":0.38,"serving":"1 Oz","calories":110.8,"cholesterol":0,"totalFat":0.1,"sodium":265.5,"carbohydrates":21.3,"dietaryFiber":0.7,"protein":5.6,"vitA":1252.2,"vitC":15.1,"calcium":8.2,"iron":4.5},
{"url":"oatmeal.jpg", "name":"Oatmeal","pricePerServing":0.82,"serving":"1 C","calories":145.1,"cholesterol":0,"totalFat":2.3,"sodium":2.3,"carbohydrates":25.3,"dietaryFiber":4,"protein":6.1,"vitA":37.4,"vitC":0,"calcium":18.7,"iron":1.6},
{"url":"malt-o-meal.jpeg", "name":"Malt-O-Meal,Choc","pricePerServing":0.52,"serving":"1 C","calories":607.2,"cholesterol":0,"totalFat":1.5,"sodium":16.5,"carbohydrates":128.2,"dietaryFiber":0,"protein":17.3,"vitA":0,"vitC":0,"calcium":23.1,"iron":47.2},
{"url":"pepperoni-pizza.jpg", "name":"PizzaW/Pepperoni","pricePerServing":0.44,"serving":"1 Slice","calories":181,"cholesterol":14.2,"totalFat":7,"sodium":267,"carbohydrates":19.9,"dietaryFiber":0,"protein":10.1,"vitA":281.9,"vitC":1.6,"calcium":64.6,"iron":0.9},
{"url":"taco.jpg", "name":"Taco","pricePerServing":0.59,"serving":"1 Small Taco","calories":369.4,"cholesterol":56.4,"totalFat":20.6,"sodium":802,"carbohydrates":26.7,"dietaryFiber":0,"protein":20.7,"vitA":855,"vitC":2.2,"calcium":220.6,"iron":2.4},
{"url":"hamburger.jpg", "name":"HamburgerW/Toppings","pricePerServing":0.83,"serving":"1 Burger","calories":275,"cholesterol":42.8,"totalFat":10.2,"sodium":563.9,"carbohydrates":32.7,"dietaryFiber":0,"protein":13.6,"vitA":126.3,"vitC":2.6,"calcium":51.4,"iron":2.5},
{"url":"hotdog.jpg", "name":"Hotdog, Plain","pricePerServing":0.31,"serving":"1 Hotdog","calories":242.1,"cholesterol":44.1,"totalFat":14.5,"sodium":670.3,"carbohydrates":18,"dietaryFiber":0,"protein":10.4,"vitA":0,"vitC":0.1,"calcium":23.5,"iron":2.3},
{"url":"couscous.jpg", "name":"Couscous","pricePerServing":0.39,"serving":"1/2 Cup","calories":100.8,"cholesterol":0,"totalFat":0.1,"sodium":4.5,"carbohydrates":20.9,"dietaryFiber":1.3,"protein":3.4,"vitA":0,"vitC":0,"calcium":7.2,"iron":0.3},
{"url":"white-rice.jpg", "name":"White Rice","pricePerServing":0.08,"serving":"1/2 Cup","calories":102.7,"cholesterol":0,"totalFat":0.2,"sodium":0.8,"carbohydrates":22.3,"dietaryFiber":0.3,"protein":2.1,"vitA":0,"vitC":0,"calcium":7.9,"iron":0.9},
{"url":"macaroni.jpg", "name":"Macaroni,Ckd","pricePerServing":0.17,"serving":"1/2 Cup","calories":98.7,"cholesterol":0,"totalFat":0.5,"sodium":0.7,"carbohydrates":19.8,"dietaryFiber":0.9,"protein":3.3,"vitA":0,"vitC":0,"calcium":4.9,"iron":1},
{"url":"peanut-butter.jpg", "name":"Peanut Butter","pricePerServing":0.07,"serving":"2 Tbsp","calories":188.5,"cholesterol":0,"totalFat":16,"sodium":155.5,"carbohydrates":6.9,"dietaryFiber":2.1,"protein":7.7,"vitA":0,"vitC":0,"calcium":13.1,"iron":0.6},
{"url":"pork.jpg", "name":"Pork","pricePerServing":0.81,"serving":"4 Oz","calories":710.8,"cholesterol":105.1,"totalFat":72.2,"sodium":38.4,"carbohydrates":0,"dietaryFiber":0,"protein":13.8,"vitA":14.7,"vitC":0,"calcium":59.9,"iron":0.4},
{"url":"sardines.jpg", "name":"Sardines in Oil","pricePerServing":0.45,"serving":"2 Sardines","calories":49.9,"cholesterol":34.1,"totalFat":2.7,"sodium":121.2,"carbohydrates":0,"dietaryFiber":0,"protein":5.9,"vitA":53.8,"vitC":0,"calcium":91.7,"iron":0.7},
{"url":"white-tuna.jpg", "name":"White Tuna inWater","pricePerServing":0.69,"serving":"3 Oz","calories":115.6,"cholesterol":35.7,"totalFat":2.1,"sodium":333.2,"carbohydrates":0,"dietaryFiber":0,"protein":22.7,"vitA":68,"vitC":0,"calcium":3.4,"iron":0.5},
{"url":"popcorn.jpg", "name":"Popcorn,Air-Popped","pricePerServing":0.04,"serving":"1 Oz","calories":108.3,"cholesterol":0,"totalFat":1.2,"sodium":1.1,"carbohydrates":22.1,"dietaryFiber":4.3,"protein":3.4,"vitA":55.6,"vitC":0,"calcium":2.8,"iron":0.8},
{"url":"bbq-potato-chips.jpg", "name":"PotatoChips,Bbqflvr","pricePerServing":0.22,"serving":"1 Oz","calories":139.2,"cholesterol":0,"totalFat":9.2,"sodium":212.6,"carbohydrates":15,"dietaryFiber":1.2,"protein":2.2,"vitA":61.5,"vitC":9.6,"calcium":14.2,"iron":0.5},
{"url":"pretzels.jpg", "name":"Pretzels","pricePerServing":0.12,"serving":"1 Oz","calories":108,"cholesterol":0,"totalFat":1,"sodium":486.2,"carbohydrates":22.5,"dietaryFiber":0.9,"protein":2.6,"vitA":0,"vitC":0,"calcium":10.2,"iron":1.2},
{"url":"tortilla-chip.jpg", "name":"Tortilla Chip","pricePerServing":0.19,"serving":"1 Oz","calories":142,"cholesterol":0,"totalFat":7.4,"sodium":149.7,"carbohydrates":17.8,"dietaryFiber":1.8,"protein":2,"vitA":55.6,"vitC":0,"calcium":43.7,"iron":0.4},
{"url":"chicken-noodle-soup.jpg", "name":"ChicknoodlSoup","pricePerServing":0.39,"serving":"1 C (8 Fl Oz)","calories":150.1,"cholesterol":12.3,"totalFat":4.6,"sodium":1862.2,"carbohydrates":18.7,"dietaryFiber":1.5,"protein":7.9,"vitA":1308.7,"vitC":0,"calcium":27.1,"iron":1.5},
{"url":"split-pea-and-ham-soup.JPG", "name":"SpltPea&Hamsoup","pricePerServing":0.67,"serving":"1 C (8 Fl Oz)","calories":184.8,"cholesterol":7.2,"totalFat":4,"sodium":964.8,"carbohydrates":26.8,"dietaryFiber":4.1,"protein":11.1,"vitA":4872,"vitC":7,"calcium":33.6,"iron":2.1},
{"url":"vegetable-beef-soup.jpg", "name":"VegetbeefSoup","pricePerServing":0.71,"serving":"1 C (8 Fl Oz)","calories":158.1,"cholesterol":10,"totalFat":3.8,"sodium":1915.1,"carbohydrates":20.4,"dietaryFiber":4,"protein":11.2,"vitA":3785.1,"vitC":4.8,"calcium":32.6,"iron":2.2},
{"url":"clam-chowder.jpg", "name":"NewengClamchwd","pricePerServing":0.75,"serving":"1 C (8 Fl Oz)","calories":175.7,"cholesterol":10,"totalFat":5,"sodium":1864.9,"carbohydrates":21.8,"dietaryFiber":1.5,"protein":10.9,"vitA":20.1,"vitC":4.8,"calcium":82.8,"iron":2.8},
{"url":"tomato-soup.jpg", "name":"Tomato Soup","pricePerServing":0.39,"serving":"1 C (8 Fl Oz)","calories":170.7,"cholesterol":0,"totalFat":3.8,"sodium":1744.4,"carbohydrates":33.2,"dietaryFiber":1,"protein":4.1,"vitA":1393,"vitC":133,"calcium":27.6,"iron":3.5},
{"url":"clam-chowder-milk.jpg", "name":"New EClamchwd,W/Mlk","pricePerServing":0.99,"serving":"1 C (8 Fl Oz)","calories":163.7,"cholesterol":22.3,"totalFat":6.6,"sodium":992,"carbohydrates":16.6,"dietaryFiber":1.5,"protein":9.5,"vitA":163.7,"vitC":3.5,"calcium":186,"iron":1.5},
{"url":"cream-mushroom.jpg", "name":"Crm MshrmSoup,W/Mlk","pricePerServing":0.65,"serving":"1 C (8 Fl Oz)","calories":203.4,"cholesterol":19.8,"totalFat":13.6,"sodium":1076.3,"carbohydrates":15,"dietaryFiber":0.5,"protein":6.1,"vitA":153.8,"vitC":2.2,"calcium":178.6,"iron":0.6},
{"url":"bean-bacon-soup.jpg", "name":"BeanbacnSoup,W/Watr","pricePerServing":0.67,"serving":"1 C (8 Fl Oz)","calories":172,"cholesterol":2.5,"totalFat":5.9,"sodium":951.3,"carbohydrates":22.8,"dietaryFiber":8.6,"protein":7.9,"vitA":888,"vitC":1.5,"calcium":81,"iron":2}];
